/* Generated By:JavaCC: Do not edit this line. NSISHelpSearchQueryParser.java */
package net.sf.eclipsensis.help.search.parser;

import java.io.*;
import java.util.Collection;

import net.sf.eclipsensis.util.CaseInsensitiveSet;

import org.apache.lucene.analysis.Analyzer;

public class NSISHelpSearchQueryParser implements NSISHelpSearchQueryParserConstants {
    public static final String REGEX_PREFIX = "re:"; //$NON-NLS-1$

    private String mField;
    private Analyzer mAnalyzer;

    /** Parses a query string, returning a collection of search terms.
     *  @param query  the query string to be parsed.
     *  @throws ParseException if the parsing fails
     */
    public static Collection parse(String field, Analyzer analyzer, String query) throws ParseException
    {
        NSISHelpSearchQueryParser parser = new NSISHelpSearchQueryParser(field, analyzer);
        return parser.parseQuery(query);
    }

    public NSISHelpSearchQueryParser(String field, Analyzer analyzer)
    {
        this(new StringReader("")); //$NON-NLS-1$
        mField = field;
        mAnalyzer = analyzer;
    }

    /** Parses a query string, returning a collection of search terms.
     *  @param query  the query string to be parsed.
     *  @throws ParseException if the parsing fails
     */
    public Collection parseQuery(String query) throws ParseException
    {
        ReInit(new StringReader(query));
        try {
            Collection result = new CaseInsensitiveSet();
            parseQuery(result);
            return result;
        }
        catch (TokenMgrError tme) {
          throw new ParseException(tme.getMessage());
        }
    }

    private String discardEscapeChar(String input)
    {
        char[] caSource = input.toCharArray();
        char[] caDest = new char[caSource.length];
        int j = 0;
        for (int i = 0; i < caSource.length; i++) {
          if ((caSource[i] != '\\') || (i > 0 && caSource[i-1] == '\\')) {
              caDest[j++]=caSource[i];
          }
        }
        return new String(caDest, 0, j);
    }

    private String wildcardToRegex(String wildcard)
    {
        StringBuffer s = new StringBuffer(wildcard.length());
        s.append(REGEX_PREFIX);
        for (int i = 0, is = wildcard.length(); i < is; i++) {
            char c = wildcard.charAt(i);
            switch(c) {
                case '*':
                    s.append("\\w*"); //$NON-NLS-1$
                    break;
                case '?':
                    s.append("\\w"); //$NON-NLS-1$
                    break;
                    // escape special regexp-characters
                case '(': case ')': case '[': case ']': case '$':
                case '^': case '.': case '{': case '}': case '|':
                case '\\':
                    s.append("\\"); //$NON-NLS-1$
                    s.append(c);
                    break;
                default:
                    s.append(c);
                    break;
            }
        }
        return(s.toString());
    }

// *   Query  ::= ( Clause )*
// *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" )
  final public void Conjunction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void Modifiers() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void parseQuery(Collection result) throws ParseException {
    Modifiers();
    Clause(result);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case NOT:
      case PLUS:
      case MINUS:
      case LPAREN:
      case QUOTED:
      case TERM:
      case WILDTERM:
      case RANGEIN_START:
      case RANGEEX_START:
      case NUMBER:

        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      Conjunction();
      Modifiers();
      Clause(result);
    }
  }

  final public void Clause(Collection result) throws ParseException {
    if (jj_2_1(2)) {
      jj_consume_token(TERM);
      jj_consume_token(COLON);
    } else {

    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED:
    case TERM:
    case WILDTERM:
    case RANGEIN_START:
    case RANGEEX_START:
    case NUMBER:
      Term(result);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      parseQuery(result);
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARAT:
        jj_consume_token(CARAT);
        jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[5] = jj_gen;

      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Term(Collection result) throws ParseException {
        Token term, goop1, goop2;
        boolean wildcard = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TERM:
    case WILDTERM:
    case NUMBER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERM:
        term = jj_consume_token(TERM);
        break;
      case WILDTERM:
        term = jj_consume_token(WILDTERM);
                                 wildcard=true;
        break;
      case NUMBER:
        term = jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUZZY_SLOP:
        jj_consume_token(FUZZY_SLOP);
        break;
      default:
        jj_la1[8] = jj_gen;

      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARAT:
        jj_consume_token(CARAT);
        jj_consume_token(NUMBER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUZZY_SLOP:
          jj_consume_token(FUZZY_SLOP);
          break;
        default:
          jj_la1[9] = jj_gen;

        }
        break;
      default:
        jj_la1[10] = jj_gen;

      }
             String termImage=discardEscapeChar(term.image);
             if (wildcard) {
                 result.add(wildcardToRegex(termImage));
             }
             else {
                 result.add(termImage);
                 Reader reader = new StringReader(termImage);
                 org.apache.lucene.analysis.TokenStream tStream = mAnalyzer.tokenStream(mField, reader);
                 org.apache.lucene.analysis.Token tok;
                 try {
                     while (null != (tok = tStream.next())) {
                         result.add(tok.termText());
                     }
                     reader.close();
                 }
                 catch (IOException ioe) {
                 }
             }
      break;
    case RANGEIN_START:
      jj_consume_token(RANGEIN_START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANGEIN_GOOP:
        goop1 = jj_consume_token(RANGEIN_GOOP);
        break;
      case RANGEIN_QUOTED:
        goop1 = jj_consume_token(RANGEIN_QUOTED);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANGEIN_TO:
        jj_consume_token(RANGEIN_TO);
        break;
      default:
        jj_la1[12] = jj_gen;

      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANGEIN_GOOP:
        goop2 = jj_consume_token(RANGEIN_GOOP);
        break;
      case RANGEIN_QUOTED:
        goop2 = jj_consume_token(RANGEIN_QUOTED);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RANGEIN_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARAT:
        jj_consume_token(CARAT);
        jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[14] = jj_gen;

      }
                if (goop1.kind == RANGEIN_QUOTED) {
                    goop1.image = goop1.image.substring(1, goop1.image.length()-1);
                }
                else {
                    goop1.image = discardEscapeChar(goop1.image);
                }
                if (goop2.kind == RANGEIN_QUOTED) {
                    goop2.image = goop2.image.substring(1, goop2.image.length()-1);
                }
                else {
                    goop2.image = discardEscapeChar(goop2.image);
                }
                result.add(goop1);
                result.add(goop2);
      break;
    case RANGEEX_START:
      jj_consume_token(RANGEEX_START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANGEEX_GOOP:
        goop1 = jj_consume_token(RANGEEX_GOOP);
        break;
      case RANGEEX_QUOTED:
        goop1 = jj_consume_token(RANGEEX_QUOTED);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANGEEX_TO:
        jj_consume_token(RANGEEX_TO);
        break;
      default:
        jj_la1[16] = jj_gen;

      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANGEEX_GOOP:
        goop2 = jj_consume_token(RANGEEX_GOOP);
        break;
      case RANGEEX_QUOTED:
        goop2 = jj_consume_token(RANGEEX_QUOTED);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RANGEEX_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARAT:
        jj_consume_token(CARAT);
        jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[18] = jj_gen;

      }
                if (goop1.kind == RANGEEX_QUOTED) {
                    goop1.image = goop1.image.substring(1, goop1.image.length()-1);
                }
                else {
                    goop1.image = discardEscapeChar(goop1.image);
                }
                if (goop2.kind == RANGEEX_QUOTED) {
                    goop2.image = goop2.image.substring(1, goop2.image.length()-1);
                }
                else {
                    goop2.image = discardEscapeChar(goop2.image);
                }
                result.add(goop1);
                result.add(goop2);
      break;
    case QUOTED:
      term = jj_consume_token(QUOTED);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUZZY_SLOP:
        jj_consume_token(FUZZY_SLOP);
        break;
      default:
        jj_la1[19] = jj_gen;

      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARAT:
        jj_consume_token(CARAT);
        jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[20] = jj_gen;

      }
            result.add(term.image.substring(1, term.image.length()-1));
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(TERM)) {
        return true;
    }
    if (jj_scan_token(COLON)) {
        return true;
    }
    return false;
  }

  public NSISHelpSearchQueryParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x600,0x600,0x3800,0x3800,0x1ec7e00,0x20000,0x1ec4000,0x1280000,0x100000,0x100000,0x20000,0x18000000,0x2000000,0x18000000,0x20000,0x80000000,0x20000000,0x80000000,0x20000,0x100000,0x20000,0x1ec0000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public NSISHelpSearchQueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public NSISHelpSearchQueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NSISHelpSearchQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public NSISHelpSearchQueryParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new NSISHelpSearchQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public NSISHelpSearchQueryParser(NSISHelpSearchQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public void ReInit(NSISHelpSearchQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) {
        token = token.next;
    }
    else {
        token = token.next = token_source.getNextToken();
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) {
                c.first = null;
            }
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error {

    /**
     *
     */
    private static final long serialVersionUID = -5134906006293461125L; }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) {
        jj_add_error_token(kind, i);
    }
    }
    if (jj_scanpos.kind != kind) {
        return true;
    }
    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
        throw jj_ls;
    }
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) {
        token = token.next;
    }
    else {
        token = token.next = token_source.getNextToken();
    }
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) {
        t = t.next;
    }
    else {
        t = t.next = token_source.getNextToken();
    }
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null) {
        return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    }
    else {
        return (jj_ntk = jj_nt.kind);
    }
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
        return;
    }
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) {
            break;
        }
        }
      }
      if (!exists) {
        jj_expentries.addElement(jj_expentry);
    }
      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[33];
    for (int i = 0; i < 33; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
